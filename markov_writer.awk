#!/usr/bin/awk -f

# usage: $progname [var=val...] [file...]
# 
# input: texts separated into units (word, char, etc) by newline.
# optional variable:
# N=<NUM>
# NUM_SEN=<NUM>
# NUM_PAR=<NUM>
# DEBUG={0,1}

# for debug
function _printAllArray(arr,name,     i){
	for(i in arr){
		print name "[" i "] = " arr[i]
	}
}

function ringArray2Index(arr, len, head,     i, ret){
	ret = arr[head%len]
	for(i = 1; i < len; i++){
		ret = ret SUBSEP arr[(head + i)%len]
	}
	return ret
}

BEGIN{
	N = 2
	NUM_PAR = 1 # how many times this program generates paragraph.
	NUM_SEN = 5 # one paragraph contains NUM_SEN sentences.
	MAX_WORD = 1000
	# debug
	DEBUG=0
	# for japanese
	DOS = "ã€‚" #delimiter of sentence.
	OFS = "" # field (word) separater.
	# init
	head = 0
	initCount = 0
	###  counts from beginning of sentence. To remind a prefix 1st-Nth
	###  word of sentence as beginnigNode[].
	beginningCount = 0
	lenBeginningNode = 0
	# inititialize rand()
	srand()
}
# for initial text.
initCount < N{
	l[initCount] = $0
	initCount++
	beginningCount++
	next
}
# for beginning sentence.
beginningCount == N{
	beginningNode[++lenBeginningNode] = ringArray2Index(l, N, head)
	# no next
}
{
	# Let X_NR be a currnent line of input.
	# node[X_{NR-N},X_{NR-N-1},...,X_{NR-1}, lenNode[]] = X_NR
	ind = ringArray2Index(l, N, head)
	node[ind, ++lenNode[ind]] = $0
	# l[] is a ring array which contains line of input.
	# l[head] = X_{NR-N}, l[(head+1)%N] = X_{NR-N-1},...
	l[(head + N) % N] = $0
	head = (head + 1)%N

	beginningCount += beginningCount<=N?1:0
	if(DOS == $0 && beginningCount >= N){
		beginningCount = 0
	}
}
function generateParagraph(    i, c, head, n, len){
	i = 1
	c = 0
	head = 0
	# choose a beginning node at random
	n = beginningNode[1 + int(lenBeginningNode*rand())]
	len=split(n, s, SUBSEP) # len shuld equals N

	for(i=1;i <= len;i++){
		printf("%s%s", s[i], OFS)
		# An index generated by split() counts from 1. However this
		# whole code assume that any indeces count from 0.
		# So translate indeces by -1.
		s[i-1]=s[i]
	}

	for(i=0;i<MAX_WORD;i++){
		# choose a node at random
		ind = ringArray2Index(s, N, head)
		r = 1 + int(lenNode[ind]*rand())
		n = node[ind,r]

		printf("%s%s", n, OFS)
		c += DOS==n?1:0
		if(c >= NUM_SEN){
			break
		}
		s[(head + N) % N] = n
		head = (head + 1)%N
	}
	return
}
END{
	if(DEBUG){
		print "###"
		_printAllArray(beginningNode, "beginningNode")
		_printAllArray(node, "node")
		print "###"
	}
	for(i = 0; i < NUM_PAR; i++){
		generateParagraph()
		printf("\n")
	}
}
